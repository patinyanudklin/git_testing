/*
 *	filename logger.h
 *		$Revision: 1.20 $ $Date: 2014/12/05 09:58:46 $	
 *
 *      ~~ Copyright 1985-2014 Kurt Rudahl and Sally Goldin
 *	Generated by Together
 *
 *	All rights are reserved. Copying or other reproduction of
 *	this program except for archival purposes is prohibited
 *	without the prior written consent of Goldin-Rudahl Associates.
 *
 *			  RESTRICTED RIGHTS LEGEND
 *
 *	Use, duplication, or disclosure by the U.S. Government
 *	is subject to restrictions as set forth in
 *	paragraph (b) (3) (B) of the Rights in Technical
 *	Data and Computer Software clause in DAR 7-104.9(a).
 *
 *	The moral right of the copyright holder is hereby asserted
 *	~~ EndC
 ****************************************************************
 *
 * $Id: logger.h,v 1.20 2014/12/05 09:58:46 rudahl Exp $
 * $Log: logger.h,v $
 * Revision 1.20  2014/12/05 09:58:46  rudahl
 * no differences between DragonProf and OpenDragon
 *
 * Revision 1.19  2006/12/10 11:57:02  rudahl
 * fixed problem with 5-char language abbr
 *
 * Revision 1.18  2006/01/19 09:21:48  rudahl
 * improvements in logging
 *
 * Revision 1.17  2006/01/13 14:20:29  rudahl
 * improving tracing control
 *
 * Revision 1.16  2005/12/30 10:33:12  rudahl
 * lintish
 *
 * Revision 1.15  2005/11/19 08:41:35  rudahl
 * revised LangFileName, etc location
 *
 * Revision 1.14  2005/09/24 14:21:56  rudahl
 * no longer extends DragonObject
 *
 * Revision 1.13  2005/02/12 02:20:58  rudahl
 * added Class, dump()
 *
 * Revision 1.12  2005/01/30 03:49:31  rudahl
 * add some extern C access fns
 *
 * Revision 1.11  2005/01/30 01:32:36  rudahl
 * based logger on DragonObject
 *
 * Revision 1.10  2005/01/29 02:33:24  rudahl
 * adapt for release 5.5
 *
 * Revision 1.9  2001/07/10 11:37:25  rudahl
 * changed logError to use long errnum
 *
 * Revision 1.8  2001/06/15 20:34:28  rudahl
 * got rid of malloc's
 *
 * Revision 1.7  2001/05/30 17:28:47  rudahl
 * integrate server and viewport communication
 *
 * Revision 1.6  2001/05/15 19:43:37  rudahl
 * created wrapper for using the IPC library with C files
 * various adaptations for use with Zortech, and to fix bugs
 *
 * Revision 1.5  2001/05/09 20:59:43  rudahl
 * finished adapting for MSC16; started for Zortech* *.cpp *.h
 *
 * Revision 1.4  2001/05/08 20:26:29  rudahl
 * extensive revisions to support Viewport (16-bit), and to generally
 * advance the implementation stage.
 *
 * Revision 1.3  2001/05/04 08:44:41  rudahl
 * Adapted to dual MSoft 16-bit & 32-bit build
 * added fn to IpcCmdWatcher to process the default commands automatically
 *
 * Revision 1.2  2001/05/02 18:40:03  rudahl
 * added Ipc writing capabilities, CLI args
 *
 * Revision 1.1  2001/04/27 21:25:58  rudahl
 * Initial deposit from tower
 * This is the IPC package developed within Together
 *
 */

/* essentially all of this class' methods are static, called by
 * Logger::xx
 * The non-static methods just invoke the static ones
 */
#ifndef LOGGER_H
#define LOGGER_H

#ifdef __cplusplus
// override some old ipc_mw.lib fns
//#define TRACE_G Logger::logTrace
#define NowString(a,b,c,d) sprintf(c,"%s%s%s",a,Logger::nowTimeStr(FALSE),b)

#ifndef DRAGONOBJECT_H
class DragonObject;
#endif

class Logger : public OB // DragonObject
    {
    public:
		// @param iDebug	debug level if > than set by OB::OB
		// @param iTrace	trace level if > than set by OB::OB
	Logger(int iDebug=0,int iTrace=0);

	/* logTrace supplies the required timestamp and module code */
	static void logTrace(const char * pczMessage,...);
	static void logError(const long lCode,const char * pczMessage, ...);

	/* guts of Logger::logTrace and ::logTrace */
	static void logTraceV(const char * pczMessage,va_list marker);

	/* guts of Logger::logError and ::logError */
	static void logErrorV(const long lCode,const char * pczMessage,
			      va_list marker);

	/* for the moment, setting this to non-NULL => a trace level of 1
	 * pczTraceArg may be NULL, or is string
	 */
	static void setTraceArg(const char * czTraceArg);
	static void setTraceLevel(unsigned long ulLevel, 
				  const char * pczComment="");
	static char * getTraceArg();

	/* czPath may be NULL, or is alloc'd */
	static void setPath(char * czPath);

	/* pczTraceFile is NOT alloc'd, and must not be NULL */
	/* @param  bZap - delete existing file */
	static void setTraceFile(const char * czTraceFile, int bZap);

	/* pczErrorLogFile is NOT alloc'd, and must not be NULL */
	/* @param  bZap - delete existing file */
	static void setErrorLogFile(const char* czErrorLogFile,
				    int bZap);

	static time_t getCorrectedTime();

	static unsigned long getTraceLevel();
	static const char * getTraceFile();
	static void setTimeOffset(const long lTimeOffset);
	static long getTimeOffset();

	virtual const char * className();

	/* get current time & return static string of form: ddd/hh:mm:ss (ee)
	 * where ddd is the weekday abbreviation, hh:mm:ss is the usual and
	 * (ee) is elapsed secs since program start
	 * If bOldTime, just reutrn the existing string
	 */
	static char * nowTimeStr(BOOL bOldTime);

	/**	create full path name consisting of the home
	 *	directory + name
	 *	Return pointer to static string 
	 */
	static const char * HomeFileName(const char * name);

	/**	create full path name consisting of the communications
	 *	(kpath) directory + name
	 * 	Not declared as 'const' because of probs with 'spawn' args
	 *	in CmdProcessor
	 *	Return pointer to static string
	 */
	static char * CommFileName(const char * name);

	/**	create full path name consisting of the language subdir of
	 *	the home directory + name
	 *	Also sets czLanguage
	 *	Return pointer to static string
	 */
	static const char * LangFileName(const char * name);

	static char czLanguage[6];	// 5 or 2-letter abbrev. for language

    protected:
	static unsigned long s_ulTraceLevel;
	static char * czTraceArg;
	static char * czTraceFile;
	static char * czErrorLogFile;
	static char * czOutPath;
	static long lTimeOffset;
	static Class s_class_Base;
    };
#endif // cplusplus

#ifdef __cplusplus
extern "C" {
#endif

void logTrace(const char * czFormat,...);

/* output error information to a logging file, 
 * or whatever Logger::logError() is set up to do
 * In any case, the output is purely intended for the developer
 * @param 'lCode'        error 'number' - see err-spec.txt for details
 * @param 'czFormat'...  sprintf-style argument list
 */
void logError(const long lCode,const char * czFormat,...);

#ifdef __cplusplus
    }
#endif

#endif //LOGGER_H

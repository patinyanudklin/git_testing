/* DRadioBox.java
 *
 * Generated by java-pp.pl from DRadioBox.java
 * on Mon Jan  8 11:41:05 EST 2001

 * Copyright  2001-2007  by Sally Goldin & Kurt Rudahl
 *
 * $Id: DRadioBox.java,v 1.8 2007/03/17 10:04:53 goldin Exp $
 * $Log: DRadioBox.java,v $
 * Revision 1.8  2007/03/17 10:04:53  goldin
 * take out init line/pixel in GCP
 *
 * Revision 1.7  2007/01/05 07:41:57  rudahl
 * added Whatis info
 *
 * Revision 1.6  2006/01/20 08:43:07  goldin
 * Make it possibleto disable one choice in a radio box
 *
 * Revision 1.5  2005/12/27 10:42:32  goldin
 * change getVerbose to isVerbose
 *
 * Revision 1.4  2005/12/24 12:39:02  goldin
 * Create 'verbose' variant of radio boxes
 *
 * Revision 1.3  2005/02/06 08:08:11  goldin
 * Fix JavaDoc warnings
 *
 * Revision 1.2  2002/09/23 23:00:38  goldin
 * Make beep part of error display  rather than a reaction in the control
 *
 * Revision 1.1  2001/11/30 18:03:09  goldin
 * Moved most of the UI basic components to the com.grs.gui package
 *
 * Revision 1.14  2001/11/05 13:59:15  goldin
 * Put UI code in a package
 *
 * Revision 1.13  2001/05/16 15:43:31  goldin
 * Fine tune control appearance and behavior
 *
 * Revision 1.12  2001/05/14 13:47:36  goldin
 * Add symbols for new text
 *
 * Revision 1.11  2001/04/18 15:32:45  goldin
 * Added home directory command line argument
 *
 * Revision 1.10  2001/03/22 12:57:33  goldin
 * Implement paths panel, including initializer, callback, new path datatype
 *
 * Revision 1.9  2001/02/28 11:50:12  goldin
 * Extend mouse handling to checkbuttons and push buttons
 *
 * Revision 1.8  2001/02/08 16:14:39  goldin
 * Added HelpEditor capability
 *
 * Revision 1.7  2001/01/29 15:19:32  goldin
 * Continued work on UI
 *
 * Revision 1.6  2001/01/19 18:43:19  goldin
 * Add handling of xlateText, menu building
 *
 * Revision 1.5  2001/01/17 14:18:23  goldin
 * Actually build initial trial panel from XML document
 *
 * Revision 1.4  2001/01/16 17:50:30  goldin
 * Began implemenation of XML parsing to create UI
 *
 * Revision 1.3  2001/01/15 14:20:25  goldin
 * Implement new layout options, makeClone methods
 *
 * Revision 1.2  2001/01/12 19:10:21  goldin
 * Completed implementation of basic control types, added validation and callback support, key handling
 *
 * Revision 1.1  2001/01/08 19:34:42  goldin
 * Initial population for new DRAGON-Java UI
 *
 */

package com.grs.gui;
import com.grs.util.StringWrapper;
import javax.swing.*;
import javax.swing.border.*;
import java.awt.*;
import java.awt.event.*;

/** Subclass that is used to implement a small number of choices
*   as a set of radio buttons.
* @author  goldin
* @version  Mon Jan 08 11:36:01 EST 2001*/
public class DRadioBox extends DragonField implements ActionListener
    {
    
      /** Array of radio buttons implementing the field.
       */
    protected JRadioButton[] radioButtons;
    
      /** Array of comment strings. Only for verbose radio boxes 
       */
    protected JLabel[] commentLabels;

      /** Index of currently selected radio button (index into
       *   radioButtons array).
       */
    protected int selectedItem = -1;
    
      /**
       * count of choices available (and of buttons)
       */
    protected int numChoices = 0;

      /** Array of values that should be passed back to
       *   DRAGON in English.
       */
    protected String[] valueStrings;

      /**
       * If this flag is true, we expect long strings explaining
       * choice values. So we layout the radio buttons alternating
       * with panels that have wrapped text.
       */
    protected boolean bVerbose = false;

      /**
       * Translated comments to be embedded as paragraphs
       * after each choice in the radio box.
       */
    protected String[] choiceComments = null;

      /**
       * Keep track of whether this is a horizontal or vertical
       * radio box, for use in cloning.
       */
    protected boolean bHorizontal = true;

    /* How many chars to wrap at in the verbose comments */
    protected int wrapLength = 40;

      /**
       * Group to enforce the mutual exclusion of radio buttons.
       */
    protected ButtonGroup btnGroup;

      /**
       * JPanel holding buttons. Used for sizing.
       */
    protected JPanel buttonPanel;
 
    protected BorderLayout mainLayout = null;

    //********************************************************************
      /**
       * Constructor creates the UI and sets the onString and offString
       * attributes.
       * @param name  Name of the radio box
       * @param text  Text to label the radio box as a whole. May be null.
       * @param values String array of DRAGON values (in English); required
       * @param choices String array of translated values; may be null.
       * @param bHorizontal If true, layout buttons horizontally, 
       *                    else vertically
       */
    public DRadioBox(String name, String text, String[] values,
		     String[] choices, boolean bHorizontal)
        {
	bChoiceControl = true;
	this.name = name;
	this.labelText = text;
	valueStrings = values;
	if (choices != null)
	    choiceStrings = choices;
	else
	    choiceStrings = (String[]) values.clone();
	numChoices = valueStrings.length;
	mainLayout = new BorderLayout(10,0); 
	setLayout(mainLayout);
	if (text != null)
	    {
	    label = new JLabel(text);
	    }
	buttonPanel = new JPanel();
	LayoutManager grid;
	btnGroup = new ButtonGroup();
	this.bHorizontal = bHorizontal;
	if (bHorizontal)
	    {
	    grid = new FlowLayout(FlowLayout.LEFT,10,0);
	    }
	else
	    {
	    grid = new GridLayout(numChoices, 0,5,0);
	    }
	buttonPanel.setLayout(grid);
	radioButtons = new JRadioButton[numChoices];
	for (int i = 0; i < numChoices; i++)
	    {
	    JRadioButton newBtn = new JRadioButton(choiceStrings[i]);
	    btnGroup.add(newBtn);
	    buttonPanel.add(newBtn);
	    newBtn.addActionListener(this);
	    newBtn.addKeyListener(this);
	    radioButtons[i] = newBtn;
	    }
	
	JPanel innerPanel = new JPanel(new BorderLayout(10,0));
	if (bHorizontal)
	    {
	    innerPanel.add(label,BorderLayout.WEST);
	    innerPanel.add(buttonPanel,BorderLayout.EAST);
	    }
	else
	    {
	    innerPanel.add(label,BorderLayout.NORTH);
	    innerPanel.add(buttonPanel,BorderLayout.SOUTH);
	    }
	add(innerPanel,BorderLayout.WEST);
	// Need to set default as selected.
        }

      /**
       * Constructor creates the UI for a verbose radio box.
       * which will have a different layout.
       * @param name  Name of the radio box
       * @param text  Text to label the radio box as a whole. May be null.
       * @param values String array of DRAGON values (in English); required
       * @param choices String array of translated values; may be null.
       * @param comments String array of translated comments
       * @param commentWidth How many chars in each comments line
       */
    public DRadioBox(String name, String text, String[] values,
		     String[] choices, String[] comments, int commentWidth)
        {
	mainLayout = new BorderLayout(10,0); 
	setLayout(mainLayout);
	bChoiceControl = true;
	bVerbose = true;
	bHorizontal = false;
	wrapLength = commentWidth;
	this.name = name;
	this.labelText = text;
	valueStrings = values;
	if (choices != null)
	    choiceStrings = choices;
	else
	    choiceStrings = (String[]) values.clone();
	choiceComments = (String[]) comments.clone();
	numChoices = valueStrings.length;
	if (text != null)
	    {
	    label = new JLabel(text);
	    }
	buttonPanel = new JPanel();
	GridLayout grid = new GridLayout(numChoices, 0,10,0);
	btnGroup = new ButtonGroup();
	buttonPanel.setLayout(grid);
	radioButtons = new JRadioButton[numChoices];
	commentLabels = new JLabel[numChoices];
	for (int i = 0; i < numChoices; i++)
	    {
	    JRadioButton newBtn = new JRadioButton(choiceStrings[i]);
	    btnGroup.add(newBtn);
	    JPanel packPanel = new JPanel(new BorderLayout());
            JPanel packPanel2 = new JPanel(new BorderLayout());
	    packPanel2.add(newBtn,BorderLayout.NORTH);
	    JLabel newLabel = new JLabel(StringWrapper.wrapAsHtml(choiceComments[i],commentWidth));
	    newLabel.setBorder(BorderFactory.createEmptyBorder(0,20,0,20));
	    packPanel2.add(newLabel,BorderLayout.SOUTH);
	    packPanel.add(packPanel2, BorderLayout.NORTH);
	    buttonPanel.add(packPanel);
	    newBtn.addActionListener(this);
	    newBtn.addKeyListener(this);
	    radioButtons[i] = newBtn;
	    commentLabels[i] = newLabel;
	    }
	
	JPanel innerPanel = new JPanel(new BorderLayout(10,0));
	innerPanel.add(label,BorderLayout.NORTH);
	innerPanel.add(buttonPanel,BorderLayout.SOUTH);
	add(innerPanel,BorderLayout.WEST);
	// Need to set default as selected.
        }

    //********************************************************************
      /**
       * Create and return copy of the present object. Data items
       * that are set during the addition to a panel are not 
       * copied.
       */
    public DragonField makeClone()
        {
	DRadioBox clone;
	if (bVerbose)
	   {
	   clone = new DRadioBox(name,label.getText(),
				 valueStrings, choiceStrings,
				 choiceComments, wrapLength);
	   }
	else
	   {
	   clone = new DRadioBox(name,label.getText(),
				 valueStrings, choiceStrings,
				 bHorizontal);
	   }
	initializeClone(clone);
	return (DragonField) clone;
	}
       
    //********************************************************************
      /**
       * Reset the radio box labels after a change to the choice
       * strings has been made.
       */
    protected void reInit()
        {
	if (choiceStrings.length != numChoices)
	    {
	    System.out.println("ERROR: In RadioBox " +
		  name+ "cannot change the number of radio choices");
	    }
	for (int i = 0; i < numChoices; i++)
	    {
	    radioButtons[i].setText(choiceStrings[i]);
	    }
	}
    //********************************************************************
      /** Tries to set the focus to the control associated
       *  with the field. Since each field subclass has different
       *  controls, this method must be implemented for each one.
       */
    public void requestFocus()
        {
	radioButtons[0].requestFocus();
	}

    //********************************************************************
      /** Returns the current value for the field. Must be overridden
       *   by each subclass.
       */
    public String getFieldValue() 
        {
	if (selectedItem < 0)
	    return "";
	return valueStrings[selectedItem];
        }
    
    //********************************************************************
      /** Sets the field to be enabled or disabled depending
       *   on the value of the bEnabled argument.
       *   
       * @param  bEnabled Enablement flag
       */
    public void setEnabled(boolean bEnabled) 
        {
	this.bEnabled = bEnabled;
	if (label != null)
	    {
	    label.setEnabled(bEnabled);
	    }
	for (int i = 0; i < numChoices; i++)
	    radioButtons[i].setEnabled(bEnabled);
        }
    
    //********************************************************************
      /** Allows the panel or other outside class to set the value of the
       *   field. Must be overridden in each subclass,
       * @param  value String to use to set value of the control.
       *   This may need to be transformed to
       *   an index or some other form.
       */
    public void setFieldValue(String value) 
        {
	int found = -1;

	for (int i = 0; (i < numChoices) && (found < 0); i++)
	    {
	    if (value.compareTo(valueStrings[i]) == 0)
	        found = i;
	    }
        if (found >= 0)
	    {
	    radioButtons[found].setSelected(true);
	    selectedItem = found;
	    }
        }
    
      /** Calculates the minimum amount of space (in pixels) required
       * by the field's graphic components. This will usually be
       * based on things like the width of the label in the current font.
       * @return Minimum width of graphical components, in pixels.
       */
    public int calculateWidth()
        {
	int labelWidth = 0;
	int controlWidth = 0;
	if (label != null)
	    {
	    FontMetrics metrics = label.getFontMetrics(label.getFont());
	    labelWidth = metrics.stringWidth(label.getText());
	    }
	controlWidth = buttonPanel.getPreferredSize().width;
	if (bHorizontal)
	    return (labelWidth + controlWidth + 20);
	else
	    return Math.max(labelWidth,controlWidth);
	}

      /** Calculates the minimum amount of vertical space (in pixels) required
       * by the field's graphic components. This will usually be
       * based on things like the width of the label in the current font.
       * @return Minimum height of graphical components, in pixels.
       */
    public int calculateHeight()
        {
	int controlHeight = 0;
	int labelHeight = 0;
	if (label != null)
	    {
	    FontMetrics metrics = label.getFontMetrics(label.getFont());
	    labelHeight = metrics.getHeight() + 
		metrics.getMaxDescent();
	    }
	controlHeight = buttonPanel.getPreferredSize().height;
	if (bHorizontal)
	    return Math.max(labelHeight,controlHeight);
	else
            return labelHeight + controlHeight + 4;
	}

      /**
       * Returns true if passed control is equivalent to present
       * control - that is, all values are the same.
       */
    public boolean equivalent(DragonField field)
        {
	if (!(field instanceof DRadioBox))
	    return false;
	if (!commonFieldsEqual(field))
	    return false;
	DRadioBox dField = (DRadioBox) field;
	if (dField.getNumChoices() != numChoices)
	    return false;
	for (int i = 0; i < numChoices; i++)
	     {
	     if (dField.getValueStrings(i).compareTo(valueStrings[i]) != 0)
	         return false;
	     if (dField.getChoiceStrings(i).compareTo(choiceStrings[i]) != 0)
	         return false;
	     }
	if (dField.isHorizontal() != bHorizontal)
	     return false;
	return true;
	}
 
    //********************************************************************
      /**
       * Method from ActionListener interface, responds to button
       * being selected.
       */
    public void actionPerformed(ActionEvent e)
        {
	JRadioButton btn = (JRadioButton) e.getSource();
	selectedItem = -1;
	for (int i = 0; (i < numChoices) && (selectedItem < 0); i++)
	    {
	    if (btn.equals(radioButtons[i]))
		selectedItem = i;
	    }
	if (validator != null)
	    {
	    if (!validator.isValid(this))
	        {
		this.requestFocus();
		return;
		}
	    }
	if (callback != null)
	    {
	    callback.executeCallback(this);
	    }
	previousValue = getFieldValue();
	}

      /**
       * Enable or disable a specific choice - a particular radio
       * button.
       * @param buttonIdx  Which one to enable/disable
       * @param flag       If true enable else disable
       */
    public void enableChoice(int buttonIdx, boolean flag)
        {
        radioButtons[buttonIdx].setEnabled(flag);
        }

    //********************************************************************
      /**
       * Override addMouseListener to add to all the subcontrols
       * as well.
       */
    public void addMouseListener(MouseListener listener)
        {
	super.addMouseListener(listener);
	buttonPanel.addMouseListener(listener);
	buttonPanel.putClientProperty(DragonField.PARENT_FIELD,this);
	for (int i = 0; i < radioButtons.length; i++)
	    {
	    radioButtons[i].addMouseListener(listener);
	    radioButtons[i].putClientProperty(DragonField.PARENT_FIELD,this);
	    }
	}

      /**
       * Override addKeyListener to add to all the subcontrols
       * as well.
       */
    public void addKeyListener(KeyListener listener)
        {
	buttonPanel.addKeyListener(listener);
	buttonPanel.putClientProperty(DragonField.PARENT_FIELD,this);
	for (int i = 0; i < radioButtons.length; i++)
	    {
	    radioButtons[i].addKeyListener(listener);
	    }
	}


    //********************************************************************
      /** * Get/Set Methods
       */
    
    public int getNumChoices()
        {
	return numChoices;
	}

    public boolean isHorizontal()
        {
	return bHorizontal;
	}

    public int getSelectedItem() 
        {
        return selectedItem;
        }
    
    public String[] getValueStrings() 
        {
        return valueStrings;
        }
    
    public String getValueStrings(int index) 
        {
        return valueStrings[index];
        }
    
    public void setValueStrings(String[] valueStrings) 
        {
        this.valueStrings = valueStrings;
        }
    
    public void setValueStrings(int index, String valueStrings) 
        {
        this.valueStrings[index] = valueStrings;
        }

    public void setVerbose(boolean flag) 
        {
        this.bVerbose = flag;
        }

    public boolean isVerbose() 
        {
        return bVerbose;
        }

    public String getChoiceComment(int index) 
        {
        return valueStrings[index];
        }
    
    public void setChoiceComments(String[] comments) 
        {
        this.choiceComments = comments;
	for (int i = 0; i < commentLabels.length; i++)
	   {
	   commentLabels[i].setText(StringWrapper.wrapAsHtml(
                                   comments[i],wrapLength));
	   }
	mainLayout.layoutContainer(this);
        }
    

    protected static String cvsInfo = null;
    protected static void setCvsInfo()
        {
        cvsInfo = "\n@(#)  $Id: DRadioBox.java,v 1.8 2007/03/17 10:04:53 goldin Exp $ \n";
	}
    }

// End of DRadioBox.java





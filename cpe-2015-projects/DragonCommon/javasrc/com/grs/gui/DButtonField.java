/* DButtonField.java
 *
 * Generated by java-pp.pl from DButtonField.java
 * on Mon Jan  8 11:40:57 EST 2001

 * Copyright  2001-2007 Sally Goldin & Kurt Rudahl
 *
 * $Id: DButtonField.java,v 1.3 2007/01/05 07:41:57 rudahl Exp $
 * $Log: DButtonField.java,v $
 * Revision 1.3  2007/01/05 07:41:57  rudahl
 * added Whatis info
 *
 * Revision 1.2  2005/02/06 08:08:11  goldin
 * Fix JavaDoc warnings
 *
 * Revision 1.1  2001/11/30 18:03:09  goldin
 * Moved most of the UI basic components to the com.grs.gui package
 *
 * Revision 1.9  2001/11/05 13:59:14  goldin
 * Put UI code in a package
 *
 * Revision 1.8  2001/04/25 10:51:01  goldin
 * Add function key handling
 *
 * Revision 1.7  2001/04/18 15:32:45  goldin
 * Added home directory command line argument
 *
 * Revision 1.6  2001/02/28 11:50:12  goldin
 * Extend mouse handling to checkbuttons and push buttons
 *
 * Revision 1.5  2001/01/17 14:18:23  goldin
 * Actually build initial trial panel from XML document
 *
 * Revision 1.4  2001/01/16 17:50:29  goldin
 * Began implemenation of XML parsing to create UI
 *
 * Revision 1.3  2001/01/15 14:20:25  goldin
 * Implement new layout options, makeClone methods
 *
 * Revision 1.2  2001/01/12 19:10:21  goldin
 * Completed implementation of basic control types, added validation and callback support, key handling
 *
 * Revision 1.1  2001/01/08 19:34:42  goldin
 * Initial population for new DRAGON-Java UI
 *
 */

package com.grs.gui;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

/** Subclass of DragonField used to implement a simple
*   push-button. The callback can be used to implement
*   the action of the button.
* @author  goldin
* @version  Mon Jan 08 11:36:01 EST 2001*/
public class DButtonField extends DragonField 
                          implements ActionListener 
    {
    
      /** Actual button object used to implement the field.
       */
    protected JButton button;

      /**
       * Constructor: creates the UI and sets up behavior
       * @param name  Name for new field
       * @param text  Text for button label (translated)
       */
    public DButtonField(String name, String text)
        {
 	this.name = name;
	setLayout(new BorderLayout());
	button = new JButton(text);
	add(button,BorderLayout.WEST);
	button.addActionListener(this);
	button.addKeyListener(this);
	}

    
    //********************************************************************
      /**
       * Create and return copy of the present object. Data items
       * that are set during the addition to a panel are not 
       * copied.
       */
    public DragonField makeClone()
        {
	DButtonField clone = new DButtonField(name,button.getText());
	initializeClone(clone);
	return (DragonField) clone;
	}

    //********************************************************************
      /** Tries to set the focus to the control associated
       *  with the field. Since each field subclass has different
       *  controls, this method must be implemented for each one.
       */
    public void requestFocus()
        {
	button.requestFocus();
	}

    //********************************************************************
      /** Returns the current value for the field. Must be overridden
       *   by each subclass.
       */
    public String getFieldValue() 
        {
	  // buttons don't have values
	return null;
        }
    
      /** Invokes the action associated with the button.
       */
    public void invoke() 
        {
	button.doClick();
        }

    //********************************************************************
      /** Sets the field to be enabled or disabled depending
       *   on the value of the bEnabled argument.
       *   
       * @param  bEnabled Enablement flag
       */
    public void setEnabled(boolean bEnabled) 
        {
	this.bEnabled = bEnabled;
	button.setEnabled(bEnabled);
        }
    
    //********************************************************************
      /** Allows the panel or other outside class to set the value of the
       *   field. Must be overridden in each subclass,
       * @param  value String to use to set value of the control.
       *   This may need to be transformed to
       *   an index or some other form.
       */
    public void setFieldValue(String value) 
        {
        }

      /** Calculates the minimum amount of space (in pixels) required
       * by the field's graphic components. This will usually be
       * based on things like the width of the label in the current font.
       * @return Minimum width of graphical components, in pixels.
       */
    public int calculateWidth()
        {
	int controlWidth = 0;
	controlWidth = button.getPreferredSize().width;
	return controlWidth;
	}

      /** Calculates the minimum amount of vertical space (in pixels) required
       * by the field's graphic components. This will usually be
       * based on things like the width of the label in the current font.
       * @return Minimum height of graphical components, in pixels.
       */
    public int calculateHeight()
        {
	int controlHeight = 0;
	controlHeight = button.getPreferredSize().height;
	return controlHeight;
	}

      /**
       * Returns true if passed control is equivalent to present
       * control - that is, all values are the same.
       */
    public boolean equivalent(DragonField field)
        {
	if (!(field instanceof DButtonField))
	    return false;
	if (!commonFieldsEqual(field))
	    return false;
	return true;
	}

    //********************************************************************
      /**
       * Method from ActionListener interface. Invokes the callback, if
       * any.
       */
    public void actionPerformed(ActionEvent e)
        {
	if (callback != null)
	    callback.executeCallback(this);
	}

    //********************************************************************
      /**
       * Override addMouseListener to add to all the subcontrols
       * as well.
       */
    public void addMouseListener(MouseListener listener)
        {
	super.addMouseListener(listener);
	button.addMouseListener(listener);
	button.putClientProperty(DragonField.PARENT_FIELD,this);
	}

      /**
       * Override addKeyListener to add to all the subcontrols
       * as well.
       */
    public void addKeyListener(KeyListener listener)
        {
	button.addKeyListener(listener);
	}

    //********************************************************************
      /** * Get/Set Methods
       */
    public JButton getButton() 
        {
        return button;
        }
    
      /**
       * Override base class method, since this class has no
       * label.
       */
    public void setLabelText(String text)
        { 
	labelText = text;
	button.setText(text);
	}

    protected static String cvsInfo = null;
    protected static void setCvsInfo()
        {
        cvsInfo = "\n@(#)  $Id: DButtonField.java,v 1.3 2007/01/05 07:41:57 rudahl Exp $ \n";
	}
    }

// End of DButtonField.java


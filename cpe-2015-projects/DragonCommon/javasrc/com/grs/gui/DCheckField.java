/* DCheckField.java
 *
 * Generated by java-pp.pl from DCheckField.java
 * on Mon Jan  8 11:40:59 EST 2001

 * Copyright  2001-2007 Sally Goldin & Kurt Rudahl
 *
 * $Id: DCheckField.java,v 1.5 2007/01/05 07:41:57 rudahl Exp $
 * $Log: DCheckField.java,v $
 * Revision 1.5  2007/01/05 07:41:57  rudahl
 * added Whatis info
 *
 * Revision 1.4  2005/02/06 08:08:11  goldin
 * Fix JavaDoc warnings
 *
 * Revision 1.3  2002/09/23 23:00:38  goldin
 * Make beep part of error display  rather than a reaction in the control
 *
 * Revision 1.2  2002/02/15 23:22:24  goldin
 * Add clearField method
 *
 * Revision 1.1  2001/11/30 18:03:09  goldin
 * Moved most of the UI basic components to the com.grs.gui package
 *
 * Revision 1.11  2001/11/05 13:59:14  goldin
 * Put UI code in a package
 *
 * Revision 1.10  2001/04/18 15:32:45  goldin
 * Added home directory command line argument
 *
 * Revision 1.9  2001/03/22 12:57:33  goldin
 * Implement paths panel, including initializer, callback, new path datatype
 *
 * Revision 1.8  2001/02/28 11:50:12  goldin
 * Extend mouse handling to checkbuttons and push buttons
 *
 * Revision 1.7  2001/01/19 18:43:19  goldin
 * Add handling of xlateText, menu building
 *
 * Revision 1.6  2001/01/17 14:18:23  goldin
 * Actually build initial trial panel from XML document
 *
 * Revision 1.5  2001/01/16 17:50:30  goldin
 * Began implemenation of XML parsing to create UI
 *
 * Revision 1.4  2001/01/15 14:20:25  goldin
 * Implement new layout options, makeClone methods
 *
 * Revision 1.3  2001/01/12 19:10:21  goldin
 * Completed implementation of basic control types, added validation and callback support, key handling
 *
 * Revision 1.2  2001/01/09 15:58:55  goldin
 * continued work implementing basic appearance of UI components
 *
 * Revision 1.1  2001/01/08 19:34:42  goldin
 * Initial population for new DRAGON-Java UI
 *
 */

package com.grs.gui;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

/** This subclass is used to present a field which has a single
*   checkbutton. Normally this subclass will be used to
*   ask a binary question with a Y/N or T/F answer.
* @author  goldin
* @version  Mon Jan 08 11:36:01 EST 2001*/
public class DCheckField extends DragonField implements ActionListener
    {
    
      /** Actual swing control implementing the
       *   check box.
       */
    protected JCheckBox checkButton;

      /**
       * String to return as value when the checkbox is checked.
       */
    protected String onString;

      /**
       * String to return as value when the checkbox is not checked.
       */
    protected String offString;
    
    //********************************************************************
      /**
       * Constructor creates the UI and sets the onString and offString
       * attributes.
       * @param name  Name of the checkbutton
       * @param text  Text to label the check button. This is required.
       * @param onString String to send back as the value when the button
       *                 is checked.
       * @param offString String to send back when the button is not checked.
       */
    public DCheckField(String name, String text, String onString,
		       String offString)
        {
	bChoiceControl = true;
	this.name = name;
	this.labelText = text;
	this.onString = onString;
	this.offString = offString;
	checkButton = new JCheckBox(text,false);
	checkButton.addActionListener(this);
	checkButton.addKeyListener(this);
	setLayout(new BorderLayout());
	add(checkButton,BorderLayout.NORTH);
        }

    //********************************************************************
      /**
       * Create and return copy of the present object. Data items
       * that are set during the addition to a panel are not 
       * copied.
       */
    public DragonField makeClone()
        {
	DCheckField clone = new DCheckField(name,checkButton.getText(),
					    onString, offString);
	initializeClone(clone);
	return (DragonField) clone;
	}

    //********************************************************************
      /** Tries to set the focus to the control associated
       *  with the field. Since each field subclass has different
       *  controls, this method must be implemented for each one.
       */
    public void requestFocus()
        {
	checkButton.requestFocus();
	}

    //********************************************************************
      /** Returns the current value for the field. Must be overridden
       *   by each subclass.
       */
    public String getFieldValue() 
        {
	boolean bChecked = checkButton.isSelected();
	if (bChecked)
	    return onString;
	else
	    return offString;
        }
    
    //********************************************************************
      /** Sets the field to be enabled or disabled depending
       *   on the value of the bEnabled argument.
       *   
       * @param  bEnabled Enablement flag
       */
    public void setEnabled(boolean bEnabled) 
        {
	this.bEnabled = bEnabled;
	checkButton.setEnabled(bEnabled);
        }
    
    //********************************************************************
      /** Allows the panel or other outside class to set the value of the
       *   field. Must be overridden in each subclass,
       * @param  value String to use to set value of the control.
       *   This may need to be transformed to
       *   an index or some other form.
       */
    public void setFieldValue(String value) 
        {
	boolean bChecked = false;
        if (value.compareTo(onString) == 0)
	   {
	   bChecked = true;
	   }
	else 
	   {
	   bChecked = false;
	   }
	checkButton.setSelected(bChecked);
        }

      /** 
       * Clear the checkmark. Used to set defaults on disabled
       * fields.
       */
    public void clearField() 
        {
	checkButton.setSelected(false);
        }

    
      /** Calculates the minimum amount of space (in pixels) required
       * by the field's graphic components. This will usually be
       * based on things like the width of the label in the current font.
       * @return Minimum width of graphical components, in pixels.
       */
    public int calculateWidth()
        {
	int controlWidth = 0;
	controlWidth = checkButton.getPreferredSize().width;
	return controlWidth;
	}

      /** Calculates the minimum amount of vertical space (in pixels) required
       * by the field's graphic components. This will usually be
       * based on things like the width of the label in the current font.
       * @return Minimum height of graphical components, in pixels.
       */
    public int calculateHeight()
        {
	int controlHeight = 0;
	controlHeight = checkButton.getPreferredSize().height;
        return controlHeight + 4;
	}

      /**
       * Returns true if passed control is equivalent to present
       * control - that is, all values are the same.
       */
    public boolean equivalent(DragonField field)
        {
	if (!(field instanceof DCheckField))
	    return false;
	if (!commonFieldsEqual(field))
	    return false;
	DCheckField cField = (DCheckField) field;
	if (cField.getOnString().compareTo(onString) != 0)
	    return false;
	if (cField.getOffString().compareTo(offString) != 0)
	    return false;
	return true;
	}
    //********************************************************************
      /**
       * Method from ActionListener interface, responds to button
       * being selected.
       */
    public void actionPerformed(ActionEvent e)
        {
	if (validator != null)
	    {
	    if (!validator.isValid(this))
	        {
		this.requestFocus();
		return;
		}
	    }
	if (callback != null)
	    {
	    callback.executeCallback(this);
	    }
	previousValue = getFieldValue();
	}


    //********************************************************************
      /**
       * Override addMouseListener to add to all the subcontrols
       * as well.
       */
    public void addMouseListener(MouseListener listener)
        {
	super.addMouseListener(listener);
	checkButton.addMouseListener(listener);
	checkButton.putClientProperty(DragonField.PARENT_FIELD,this);
	}

      /**
       * Override addKeyListener to add to all the subcontrols
       * as well.
       */
    public void addKeyListener(KeyListener listener)
        {
	checkButton.addKeyListener(listener);
	}

    //********************************************************************
      /** * Get/Set Methods
       */
    public JCheckBox getCheckButton() 
        {
        return checkButton;
        }
    
    public boolean isChecked() 
        {
        return checkButton.isSelected();
        }
    
    public void setChecked(boolean bChecked) 
        {
        checkButton.setSelected(bChecked);
        }

    public String getOnString()
        {
	return onString;
	}

    public String getOffString()
        {
	return offString;
	}

      /**
       * Override base class method, since this class has no
       * label.
       */
    public void setLabelText(String text)
        { 
	labelText = text;
	checkButton.setText(text);
	}

    

    protected static String cvsInfo = null;
    protected static void setCvsInfo()
        {
        cvsInfo = "\n@(#)  $Id: DCheckField.java,v 1.5 2007/01/05 07:41:57 rudahl Exp $ \n";
	}
    }

// End of DCheckField.java


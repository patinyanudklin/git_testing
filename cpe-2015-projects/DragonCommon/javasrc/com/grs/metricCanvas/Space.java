/* Space.java
 * kurt rudahl 10/26/2001
 * copyright Sally Goldin & Kurt Rudahl
 * purpose:
 ************************************************************************
 * $Id: Space.java,v 1.3 2005/02/06 08:21:59 goldin Exp $
 * $Log: Space.java,v $
 * Revision 1.3  2005/02/06 08:21:59  goldin
 * Fix javadoc warnings
 *
 * Revision 1.2  2001/10/27 19:20:26  rudahl
 * more improvements
 *
 * Revision 1.1  2001/10/27 13:13:31  rudahl
 * initial despoit, from tower. Not yet working
 *
 ************************************************************************
 * history 10/26/2001   created
 *                      Generated by Together
 */

package com.grs.metricCanvas;

/**
 * A metric region which can be drawn into.
 * 
 * This is the parent of both 2D (Plane), 3D (Volume) and posibly
 * other spaces. Don't know what they have in common, 
 * so there's not much here. */

public abstract class Space
    {
      /** Construct a multi-dimensional space, where argument arrays are
       *  in the order X, Y, Z and so on.
       * @param parent       enclosing Space if any.
       * @param iDimensions  number of dimensions 
       * @param metric       array per-dimension of classes which implement
       *                     Metric, to map dataRange values to logicalRange
       * @param minRange     array per-dimension of minimum data values
       * @param maxRange     array per-dimension of maximum data values
       * @param logicalRange array per-dimension of (positive) size of space
       *                     (i.e. in pixels, etc).
       * @param offset       array per-dimension of (positive) offset 
       *                     in logical units w.r.t. parent.
       */
    protected Space(Space parent, int iDimensions, Metric[] metric, 
		    double[] minRange, double[] maxRange, int[] logicalRange,
		    int[] offset)
        {
	m_Parent = parent;
	m_iDimensions = iDimensions;
	m_Metric = metric;
	m_MinRange = minRange;
	m_MaxRange = maxRange;
	m_LogicalPixels = logicalRange;
	m_Offset = offset;
	}

    protected Space(Space parent,int iDimensions)
        {
	this(parent,iDimensions,(Metric[])null,
	       (double[])null,(double[])null,(int[])null,(int[])null);
	}

      /** set the Metric class in each dimension in X,Y,Z, and so on, order.
       */
    protected void setMetrics(Metric[] metrics) { m_Metric = metrics; }

      /** set the logical pixel offset in each dimension in X,Y,Z,and so on, order
       */
    protected void setOffset(int [] offset) { m_Offset = offset; }

      /** set the number of logical pixels in each dimension in X,Y,Z,and so on, order
       */
    protected void setLogicalRange(int[] range) { m_LogicalPixels = range; }

      /** set the minimum and maximum input data values in each dimension
       *  in X,Y,Z,and so on, order.
       */
    protected void setDataRanges(double[] minRange,double[] maxRange)
        {
	m_MinRange = minRange;
	m_MaxRange = maxRange;
	}

      /** remap all dimensions of a point in data space coordinates
       *  into logical pixel coordinates.
       */
    protected int[] remap(double[] point)
       throws DefectiveStructureException
        {
	int[] retval = new int[m_iDimensions]; 
	for (int i=0; i<m_iDimensions; i++)
  	    {
	    if(m_Metric[i] == null)
	        throw new DefectiveStructureException("Missing value or "
						      + "metric for dimension "
						      + i);
	    retval[i] = m_Metric[i].remap(point[i]);
	    }
	return retval;
	}

    public abstract void drawLine(double[] start, double[] end)
       throws DefectiveStructureException;

      /** draw a right rectangular n-dimensional thing
       * @param corner0   the corner with the lowest value in each dimension
       * @param corner1   the corner with the highest value in each dimension
       */
    public abstract void drawBlock(double[] corner0, double[] corner1)
       throws DefectiveStructureException;

      /** draw and fill a right rectangular n-dimensional thing
       * @param corner0   the corner with the lowest value in each dimension
       * @param corner1   the corner with the highest value in each dimension
       */
    public abstract void fillBlock(double[] corner0, double[] corner1)
       throws DefectiveStructureException;

      /** draw and fill a right circular thing
       * @param center    the center
       * @param diameter  diameter is expressed in logicalPixels
       */
    public abstract void fillCircle(double[] center, int iDiameter)
       throws DefectiveStructureException;

      /** draw specified string using current font
       *  @param position   reference point of text placement
       *  @param iPlacement placement of text w.r.t. position
       *  @param str        text to be rendered
       */
    public abstract void drawString(double[] position, int iPlacement,
				    String str)
       throws DefectiveStructureException;

    protected Space m_Parent;
    protected int m_iDimensions;   /* how many dimensions */
    protected Metric[] m_Metric;  /* per-dimension: mapper */
    protected double[] m_MinRange; /* per-dimension: minimum of value range */
    protected double[] m_MaxRange; /* per-dimension: maximum of value range */
    protected int[] m_LogicalPixels; /* per-dimension: (positive) size */
    protected int[] m_Offset;

      /* values for iPlacement of string */
    public static final int LEFT_JUSTIFIED = 0;
    public static final int CENTER_JUSTIFIED = 1;
    public static final int RIGHT_JUSTIFIED = 2;
    public static final int CENTERED = 3; /* centered in all dimensions */
    }

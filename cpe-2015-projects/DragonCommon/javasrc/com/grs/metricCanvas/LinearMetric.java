/* LinearMetric.java
 * kurt rudahl 10/26/2001
 * copyright goldin-rudahl associates
 * purpose: The most common metric: a linear scaling betwen input and output 
 **************************************************************************
 * $Id: LinearMetric.java,v 1.4 2001/11/02 19:13:45 goldin Exp $
 * $Log: LinearMetric.java,v $
 * Revision 1.4  2001/11/02 19:13:45  goldin
 * Add unmap function
 *
 * Revision 1.3  2001/10/27 19:20:26  rudahl
 * more improvements
 *
 * Revision 1.2  2001/10/27 17:32:37  rudahl
 * actually made it work, for Rulers
 *
 * Revision 1.1  2001/10/27 13:13:31  rudahl
 * initial despoit, from tower. Not yet working
 *
 **************************************************************************
 * history 10/26/2001   created
 *                      Generated by Together
 */

package com.grs.metricCanvas;

/**
 * The most common metric: a linear scaling betwen input and output 
 */
public class LinearMetric implements Metric
    {
    LinearMetric()
        {
	m_MinInput = m_MaxInput = 0.0;
	m_iMinOutput = m_iMaxOutput = 0;
	m_Coef = 1.0;
	}

     LinearMetric(double minInput, double maxInput, 
		  int minOutput, int maxOutput)
        {
        setRange(minInput,maxInput,minOutput,maxOutput);
	}

      /** specify the minimum to maximum possible coordinate values
       *  (closed interval; min < max)
       */
    public void setRange(double minInput, double maxInput, 
			 int iMinOutput, int iMaxOutput)
        {
	m_MinInput = minInput;
	m_MaxInput = maxInput;
	m_iMinOutput = iMinOutput;
	m_iMaxOutput = iMaxOutput;
	m_Coef = (iMaxOutput - iMinOutput) / (maxInput - minInput);
 	m_InverseCoef = (maxInput - minInput) / (iMaxOutput - iMinOutput);
	}

      /** remap the specified 1-dimensional point to conform to
       *  this metric. 
       */
    public int remap(double point)
        {
	int iRetval = (int)((point - m_MinInput) * m_Coef) + m_iMinOutput;
	return iRetval;
	}

      /** reverse the mapping. Given an output point, map to
       * input values.
       */
    public double unmap(int iPoint)
        {
        double retval = (double)(iPoint - m_iMinOutput) * m_InverseCoef +
                                   m_MinInput;
        return retval;
	}


    protected double m_MinInput; 
    protected double m_MaxInput;
    protected int m_iMinOutput;
    protected int m_iMaxOutput;
    protected double m_Coef;
    protected double m_InverseCoef;
    }

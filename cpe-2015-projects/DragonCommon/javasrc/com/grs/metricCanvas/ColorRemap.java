
/**
 * Test class to do color remapping.
 */
public class ColorRemap
    {

    public static void recastColorTables()
        {
        int iColor;
	int iMappedIndex;
        StringBuffer buffer = new StringBuffer();
        for (iColor = 0; iColor < 256; iColor++)
	    {
            if ((iColor > 0) && (iColor %4  == 0))
	        {
                System.out.println(buffer.toString());
		buffer.delete(0,buffer.length());
		}
            iMappedIndex = TbaMap[iColor];
            buffer.append("0x" +
            Integer.toString((BasicMap[iMappedIndex*3] << 2),16).toUpperCase() 
	     + ",0x" +
            Integer.toString((BasicMap[iMappedIndex*3+1] << 2),16).toUpperCase() 
	     + ",0x" +
	    Integer.toString((BasicMap[iMappedIndex*3+2] << 2),16).toUpperCase() 
	     + ", ");
	    }
	System.out.println(buffer.toString());
	}

  public static void main(String args[])
      {
      recastColorTables();
      }

  public static int BasicMap[] = {
     0,  0,  0,     1,  1,  1,     2,  2,  2,     3,  3,  3,
     5,  5,  5,     6,  6,  6,     7,  7,  7,     9,  9,  9,
    10, 10, 10,    11, 11, 11,    12, 12, 12,    13, 13, 13,
    14, 14, 14,    15, 15, 15,    17, 17, 17,    18, 18, 18,  
/* x10 */
    19, 19, 19,    21, 21, 21,	  22, 22, 22,    23, 23, 23, 
    24, 24, 24,    25, 25, 25,	  26, 26, 26,    27, 27, 27,
    29, 29, 29,    30, 30, 30,    31, 31, 31,    33, 33, 33,
    34, 34, 34,    35, 35, 35,    36, 36, 36,    37, 37, 37,
/* x20 */
     0,  0, 12,    12, 12, 24,     0,  0, 24,     0,  0, 36,
     0, 12, 36,     0,  0, 48,     0, 12, 48,     0,  0, 60,
     0, 12, 60,    12,  0, 60,     0, 24, 60,    12, 12, 48,
    12, 12, 60,    12, 24, 60,    24, 24, 48,    24, 24, 60,
/* x30 */
     0, 12, 12,     0, 12, 24,    12, 24, 24,     0, 24, 36,
    12, 24, 36,     0, 24, 48,    12, 24, 48,     0, 36, 48,
    12, 36, 48,     0, 36, 60,     0, 48, 60,    12, 36, 60,
    12, 48, 60,    24, 48, 48,    24, 48, 60,    36, 48, 60,
/* x40 */
     0, 12,  0,    12, 24, 12,     0, 24,  0,     0, 36,  0,
     0, 48,  0,    12, 48,  0,     0, 60,  0,     0, 60, 12,
    12, 60,  0,    12, 48, 12,    12, 60, 12,    24, 60, 12,
     0, 48, 12,    24, 48, 24,    24, 60, 24,    36, 48, 36,		     
/* x50 */
     0, 24, 12,     0, 36, 12,    12, 36, 12,     0, 36, 24,
    24, 36, 24,    12, 36, 24,     0, 48, 24,    12, 48, 24,
     0, 60, 24,     0, 60, 36,    12, 60, 24,    12, 60, 36,
    24, 48, 36,    24, 60, 36,    36, 60, 36,    48, 60, 36,
/* x60 */
     0, 24, 24,     0, 36, 36,    12, 36, 36,     0, 48, 36,
    12, 48, 36,     0, 48, 48,    12, 48, 48,     0, 60, 48,
    12, 60, 48,     0, 60, 60,    12, 60, 60,    24, 60, 48,
    24, 60, 60,    36, 60, 48,    36, 60, 60,    48, 60, 60,
/* x70 */
    12, 12,  0,    24, 24, 12,    12, 24,  0,    12, 36,  0,    
    24, 36,  0,    24, 36, 12,    24, 48,  0,    24, 48, 12,
    24, 60,  0,    36, 48,  0,    36, 48, 12,    36, 60,  0,
    36, 60, 12,    48, 60, 12,    36, 48, 24,    36, 60, 24,
/* x80 */
    12,  0,  0,    24,  0,  0,    36,  0,  0,    48,  0,  0,
    60,  0,  0,    60,  0, 12,    60, 12,  0,    48, 12,  0,
    48, 24,  0,    48, 12, 12,    60, 12, 12,    48, 24, 24,
    60, 24, 24,    48, 36, 36,    60, 24, 12,    60, 36, 12,  
/* x90 */
    12,  0, 12,    12,  0, 24,    12,  0, 36,    12, 12, 36,
    12,  0, 48,    24,  0, 36,    24, 12, 24,    24, 12, 36,
    24,  0, 48,    24, 12, 48,    24,  0, 60,    36,  0, 60,
    24, 12, 60,    36, 12, 60,    36, 24, 48,    36, 24, 60,
/* xA0 */
    24,  0, 24,    36,  0, 36,    36, 12, 36,    48,  0, 36,
    48, 12, 36,    48,  0, 48,    48, 12, 48,    60,  0, 36,
    60,  0, 48,    60, 12, 36,    60, 12, 48,    60,  0, 60,
    60, 12, 60,    60, 24, 60,    60, 36, 60,    60, 48, 60,
/* xB0 */
    24,  0, 12,    24, 12, 12,    36,  0, 12,    36, 12, 12,
    36,  0, 24,    36, 12, 24,    48,  0, 12,    48,  0, 24,
    48, 12, 24,    60,  0, 24,    60, 12, 24,    48, 24, 36,
    60, 24, 36,    60, 36, 36,    60, 48, 24,    60, 48, 36,
/* xC0 */
    24, 12,  0,    36, 12,  0,    36, 24,  0,    36, 24, 12,   
    48, 24, 12,    60, 24,  0,    60, 36,  0,    48, 48, 24,
    48, 48, 36,    48, 36, 24,    60, 36, 24,    48, 24, 48,
    60, 24, 48,    60, 36, 48,    48, 36, 60,    48, 48, 60,
/* xD0 */
    24, 24,  0,    36, 36,  0,    36, 36, 12,    48, 36,  0,
    48, 36, 12,    48, 48,  0,    48, 48, 12,    48, 60,  0,
    48, 60, 24,    60, 48,  0,    60, 48, 12,    60, 60,  0,
    60, 60, 12,    60, 60, 24,    60, 60, 36,    60, 60, 48,
/* xE0 */
    24, 36, 48,    24, 36, 60,    36,  0, 48,    36, 12, 48,
    48,  0, 60,    48, 12, 60,    48, 24, 60,    48, 36, 48,
    36, 36, 48,    36, 48, 48,    48, 60, 48,    36, 36, 60,
    24, 36, 36,    36, 24, 24,    36, 24, 36,    36, 36, 24,
/* xF0 */
    24, 24, 36,    60, 48, 48,    38, 38, 38,    39, 39, 39,    
    41, 41, 41,    43, 43, 43,    45, 45, 45,    47, 47, 47,    
    49, 49, 49,    51, 51, 51,    53, 53, 53,    55, 55, 55,    
    57, 57, 57,    59, 59, 59,    61, 61, 61,    63, 63, 63 } ;

   public static int TbaMap[] = {
    0x00, 0x20, 0x22, 0x23, 0x25, 0x27, 0x40, 0x30,
    0x31, 0x24, 0x26, 0x28, 0x42, 0x50, 0x60, 0x33,
    0x35, 0x2A, 0x43, 0x51, 0x53, 0x61, 0x37, 0x39,
    0x44, 0x4C, 0x56, 0x63, 0x65, 0x3A, 0x46, 0x47,
    0x58, 0x59, 0x67, 0x69, 0x80, 0x90, 0x91, 0x92,
    0x94, 0x29, 0x70, 0x0A, 0x21, 0x93, 0x2B, 0x2C,
    0x72, 0x41, 0x32, 0x34, 0x36, 0x2D, 0x73, 0x52,
    0x55, 0x62, 0x38, 0x3B, 0x45, 0x49, 0x57, 0x64,
    0x66, 0x3C, 0x48, 0x4A, 0x5A, 0x5B, 0x68, 0x6A,
    0x81, 0xB0, 0xA0, 0x95, 0x98, 0x9A, 0xC0, 0xB1,
    0x96, 0x97, 0x99, 0x9C, 0xD0, 0x71, 0x14, 0xF0,
    0x2E, 0x2F, 0x74, 0x75, 0x54, 0xEC, 0xE0, 0xE1,
    0x76, 0x77, 0x4D, 0x5C, 0x3D, 0x3E, 0x78, 0x4B,
    0x4E, 0x5D, 0x6B, 0x6C, 0x82, 0xB2, 0xB4, 0xA1,
    0xE2, 0x9B, 0xC1, 0xB3, 0xB5, 0xA2, 0xE3, 0x9D,
    0xC2, 0xC3, 0xED, 0xEE, 0x9E, 0x9F, 0xD1, 0xD2,
    0xEF, 0x1E, 0xE8, 0xEB, 0x79, 0x7A, 0x7E, 0x4F,
    0xE9, 0x3F, 0x7B, 0x7C, 0x7F, 0x5E, 0x6D, 0x6E,
    0x83, 0xB6, 0xB7, 0xA3, 0xA5, 0xE4, 0x87, 0x89,
    0xB8, 0xA4, 0xA6, 0xE5, 0x88, 0xC4, 0x8B, 0xBB,
    0xCB, 0xE6, 0xD3, 0xD4, 0xC9, 0x8D, 0xE7, 0xCE,
    0xD5, 0xD6, 0xC7, 0xC8, 0xF7, 0xCF, 0xD7, 0x7D,
    0xD8, 0x5F, 0xEA, 0x6F, 0x84, 0x85, 0xB9, 0xA7,
    0xA8, 0xAB, 0x86, 0x8A, 0xBA, 0xA9, 0xAA, 0xAC,
    0xC5, 0x8E, 0x8C, 0xBC, 0xCC, 0xAD, 0xC6, 0x8F,
    0xCA, 0xBD, 0xCD, 0xAE, 0xD9, 0xDA, 0xBE, 0xBF,
    0xF1, 0xAF, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xFD,
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
    0x09, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11,
    0x12, 0x13, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A,
    0x1B, 0x1C, 0x1D, 0x1F, 0xF2, 0xF3, 0xF4, 0xF5,
    0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFE, 0xFF } ;

    }


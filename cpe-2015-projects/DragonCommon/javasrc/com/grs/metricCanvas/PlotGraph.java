/* PlotGraph.java
 * kurt rudahl 10/27/2001
 * copyright Sally Goldin & Kurt Rudahl
 * purpose: draw a graph
 *****************************************************************************
 * $Id: PlotGraph.java,v 1.8 2005/02/06 08:21:59 goldin Exp $
 * $Log: PlotGraph.java,v $
 * Revision 1.8  2005/02/06 08:21:59  goldin
 * Fix javadoc warnings
 *
 * Revision 1.7  2002/06/10 19:30:03  goldin
 * Make all rects at least 1 pixel wide
 *
 * Revision 1.6  2001/11/17 21:27:41  rudahl
 * improvements for StripChart which is now in jar
 *
 * Revision 1.5  2001/11/09 19:05:01  rudahl
 * improved histogram display
 *
 * Revision 1.4  2001/11/02 20:57:46  rudahl
 * refinements for viewport
 *
 * Revision 1.3  2001/10/29 20:21:14  rudahl
 * refined calling params and documentation
 *
 * Revision 1.2  2001/10/29 13:17:41  rudahl
 *  fixed bugs in drawing fn params
 *
 * Revision 1.1  2001/10/27 19:19:41  rudahl
 * first deposit - from closet
 *
 *
 *****************************************************************************
 * history 10/27/2001   created
 *                      Generated by Together
*/
/**
 * draw a graph
 */
package com.grs.metricCanvas;

import java.awt.*;

/* draw a graph, in one of several formats. Multiple data sets (with the
 * same data ranges) can be
 * plotted on the same graph.
 */
public class PlotGraph extends LinearPlaneSpace
    {
      /** create a graph; then call plot() to do the drawing.
       *
       *  @param g           Graphics to draw into
       *  @param parent      enclosing Space, or null
       *  @param minRange    minimum value of data (in each coordinate) which this graph
       *                     plots
       *  @param maxRange    maximum value of data (in each coordinate) which this graph
       *                     plots
       *  @param logicalRange size, w.r.t. the parent or enclosing frame.
       *  @param offset      offset, w.r.t. the parent or enclosing frame.
       *                     If the parent or enclosing frame has its 
       *                     origin in the u.l. corner, 
       *                     offset.height should be negative.
       *  @param iStyle      Set the default plotting style:
       *                     LINE for line graph,
       *                     BAR for bar/histogram
       *                     BAR_FILLED for bar/histogram with no blanks
       *                     POINT for random points
       */
    public PlotGraph(Graphics g, PlaneSpace parent, 
		     double[] minRange, double[] maxRange, 
		     Dimension logicalRange, Dimension offset,
		     int iStyle)
        {
	super(g,parent,minRange,maxRange,logicalRange,offset);
	m_iStyle = iStyle;
	}

 	/** plot data set in current color, using default style
	 *  @param x   array of values of x variable
	 *             The graph is plotted in the order these values
	 *             occur, so sequence is important except for POINT 
	 *             graphs. In particular, for BAR_FILLED these
	 *             MUST be in monotonic ascending order
	 *  @param y   array of values of y variable
	 */
    public void plot(double[] x, double[] y)
       throws DefectiveStructureException
	{
	plot(x,y,m_iStyle);
	}

 	/** plot data set in current color
	 *  @param x          array of values of x variable
	 *                    The graph is plotted in the order these values
	 *                    occur, so sequence is important except for POINT 
	 *                    graphs. In particular, for BAR_FILLED these
	 *                    MUST be in monotonic ascending order
	 *  @param y          array of values of y variable
	 *  @param iStyle     Set the plotting style for this data set only:
	 *                     LINE for line graph,
	 *                     BAR for bar/histogram
	 *                     BAR_FILLED for bar/histogram with no blanks
	 *                     POINT for random points
	 */
    public void plot(double[] x, double[] y, int iStyle)
       throws DefectiveStructureException
	{
	if ((x.length < 2) || (x.length != y.length)) 
	    {
	    String descr = "PlotGraph: empty or mismatched parameters: "
	      		   +"x has length "+x.length
			   +"; y has length "+y.length;
	    throw new DefectiveStructureException(descr);
	    }
	double[] prevPoint = null; 
	for (int i=0; i<x.length; i++)
	    {
	    if ((y[i] < m_MinRange[1]) || (y[i] > m_MaxRange[1]))
		continue; /* out-of-range */
	    double[] point = new double[]{x[i],y[i]};
	    double[] footPoint = new double[]{x[i],0};
	    if (iStyle == LINE)
		{
		if (prevPoint != null)
		    drawLine(prevPoint,point);
		prevPoint = point;
		}
	    else if (iStyle == BAR)
		{
                if (point[1] < 0.0001)
		    continue;
		point[0] += (double)m_iGlyphSize / 2.0;
		footPoint[0] -= (double)m_iGlyphSize / 2.0;
		fillBlock(footPoint,point);
		}
 	    else if (iStyle == BAR_FILLED)
		{
                if (point[1] < 0.0001)
		    continue;
		  //if (i < x.length-1)
		    point[0] += 0.5;
		if ((i > 0) && (footPoint[0] >= 0.5))
		    footPoint[0] -= 0.5;
		fillBlock(footPoint,point);
		}
 	    else if (iStyle == POINT)
		fillCircle(point, m_iGlyphSize);
	    }
	}

 	/** plot data set in POINT style, 
	 *  where each point has a specified color
	 *  @param x          array of values of x variable
	 *  @param y          array of values of y variable
	 *  @param color      array of colors corresponding to each x element
	 */
    public void plot(double[] x, double[] y, Color[] color)
       throws DefectiveStructureException
	{
	if ((x.length < 2) || (x.length != y.length) 
		  || (x.length != color.length)) 
	    {
	    String descr = "PlotGraph: empty or mismatched parameters: "
	      		   +"x has length "+x.length
			   +"; y has length "+y.length
			   +"; color has length "+color.length;
	    throw new DefectiveStructureException(descr);
	    }
	double[] prevPoint = null; 
	for (int i=0; i<x.length; i++)
	    {
	    double[] point = new double[]{x[i],y[i]};
	    m_g.setColor(color[i]);
	    fillCircle(point, m_iGlyphSize);
	    }
	}

    public void setGlyphSize(int iSize) { m_iGlyphSize = iSize; }

    protected int m_iGlyphSize = 1; /* diameter of POINT circle, or
				     * width of BAR */
    protected int m_iStyle;
	/* some iStyle values */
    public static final int LINE = 0;
    public static final int BAR = 1;
    public static final int BAR_FILLED = 2;
    public static final int POINT = 3;

	/*
    public static Image OSC = null;
    public static Frame frame = null;

    public void paint(Graphics g)
        {
	if (OSC != null)
	    g.drawImage(OSC,0,0,frame);
	}
    public void update(Graphics g)
      {
	paint(g);
      }

    public static void main(String[] args)
        {
	frame = new Frame();
	frame.setBounds(new Rectangle(200,200,500,500));
	frame.setVisible(true);
	OSC = frame.createImage(200,200);
	if (OSC == null)
	    {
	    System.err.println("Unable to create image");
	    System.exit(1);
	    }
	Graphics g = OSC.getGraphics();
	g.setClip(0,0,199,199);
	    g.setColor(Color.blue);
	    g.fill3DRect(20,20,100,100,true);
	    g.setColor(Color.red);
	    g.drawString("treddy",50,50);
	    frame.repaint();
	try
	    {
	    Ruler r = new Ruler(g,null,new double[]{0.0,0.0},
	                    new double[]{100.0,100.0},
			    new Dimension(200,300),
			    new Dimension(0,0),X_AXIS,0,
			    new double[]{0.0,20.0,40.0,60.0,80.0,100.0},
			    new String[]{"0","","40","","80"},
			    5);
	    g.setColor(Color.blue);
	    g.fill3DRect(20,20,100,100,true);
	    g.setColor(Color.red);
	    g.drawString("treddy",50,50);
	    frame.repaint();
	    }
	catch(Exception e)
	  {
	    e.printStackTrace();
	  }
	}
	*/
    }
